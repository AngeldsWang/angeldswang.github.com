<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sampling | Brave Matrix]]></title>
  <link href="http://AngeldsWang.github.io/blog/categories/sampling/atom.xml" rel="self"/>
  <link href="http://AngeldsWang.github.io/"/>
  <updated>2014-08-12T00:45:30-04:00</updated>
  <id>http://AngeldsWang.github.io/</id>
  <author>
    <name><![CDATA[zhenjun Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rejection Sampling]]></title>
    <link href="http://AngeldsWang.github.io/blog/20140811/"/>
    <updated>2014-08-11T03:30:00-04:00</updated>
    <id>http://AngeldsWang.github.io/blog/rejection-sampling</id>
    <content type="html"><![CDATA[<p>如何产生符合一定分布的随机变量？对于简单的随机变量，我们往往可以直接获得其概率分布函数<script type="math/tex">F(x)=P(X\leqslant x)</script>。但是对于更多复杂的随机变量来说，获得其概率分布的解析表达式是不可能的。对于这种情况，要产生这样的随机变量就需要另辟蹊径。<strong>Rejection sampling</strong>就是其中最具代表性的一种。下文主要参考了<a href="http://www.columbia.edu/~ks20/4703-Sigman/Monte-Carlo-Sigman.html" title="Karl Sigman's Lecture Notes on Monte Carlo Simulation">Karl Sigman的notes</a>。<!--more--> </p>

<p>Rejection sampling的主要思想是用另一个容易产生的概率分布<script type="math/tex">G</script>，(它的概率密度是<script type="math/tex">g(x)</script>)，来尽可能的逼近所求的概率分布<script type="math/tex">F</script>。形式化出来就是，这两个概率分布密度的比有明确的上界<script type="math/tex">c</script>，即<script type="math/tex">\text{sup}_x\{f(x)/g(x)\}\leqslant c</script>。实际中，<script type="math/tex">c</script>的值尽可能的接近<script type="math/tex">1</script>。下面首先来看如何用Rejection sampling来获得连续随机变量。对于离散随机变量，情况基本类似。</p>

<h3 id="font-colorff5544rejection-samplingfont"><font color="#FF5544">用Rejection sampling算法产生连续随机变量</font></h3>
<table border="2" cellpadding="15px" bordercolor="#FF5544">
<td>
<ol>
<li>生成服从概率分布$G$的随机变量$Y$。</li> <p />
<li>从均匀分布$Uniform(0,1)$采样获得一个随机变量$U$(和$Y$相互独立)。</li> <p />
<li>If $U\leqslant \frac{f(Y)}{cg(Y)}$，then $X=Y$("accept");<br />
    Otherwise goto step 1 ("reject")。</li> 
</ol>
</td>
</table>
<p><br />
在证明上述算法之前，有以下几点值得我们注意：  </p>

<ul>
  <li><script type="math/tex">f(Y)</script>和<script type="math/tex">g(Y)</script>都是随机变量，因此<script type="math/tex">\frac{f(Y)}{cg(Y)}</script>也是一个随机变量。这一比值和step 2 中的随机变量<script type="math/tex">U</script>是相互独立的。  </li>
  <li>这一比值是以0和1为上下界的，即<script type="math/tex">0\leqslant \frac{f(Y)}{cg(Y)}\leqslant 1</script>。  </li>
  <li>step 1 和 step 2 调用的次数<script type="math/tex">N</script>(也就是成功采样获得一个<script type="math/tex">X</script>所需的迭代次数)本身也是一个服从几何分布的随机变量。其一次试验就发生的概率<script type="math/tex">p=P(U\leqslant \frac{f(Y)}{cg(Y)})</script>，则<script type="math/tex">P(N=n)=(1-p)^{n-1}p, n\geqslant 1</script>。因此迭代次数的期望为<script type="math/tex">E(N)=1/p</script>。  </li>
  <li>最终，我们可以将所期望获得的随机变量<script type="math/tex">X</script>的概率分布<script type="math/tex">F</script>等价于在事件<script type="math/tex">\{U\leqslant \frac{f(Y)}{cg(Y)}\}</script>发生的条件下，随机变量<script type="math/tex">Y</script>的概率分布。<br />
<br />
另外，若以随机变量<script type="math/tex">Y</script>为条件，事件<script type="math/tex">\{U\leqslant \frac{f(Y)}{cg(Y)}\}</script>发生的概率为：<script type="math/tex">P(U\leqslant \frac{f(Y)}{cg(Y)}|Y=y)=\frac{f(y)}{cg(y)}</script>。考虑到<script type="math/tex">Y</script>的概率密度为<script type="math/tex">g(y)</script>，通过去条件化并对<script type="math/tex">Y</script>所有可能的值上进行积分，这样就可以得到<script type="math/tex">p=P(U\leqslant \frac{f(Y)}{cg(Y)})</script>，即：    </li>
</ul>

<script type="math/tex; mode=display">% &lt;![CDATA[
    
\begin{align*}    
p & = \int_{-\infty}^{\infty}\frac{f(y)}{cg(y)}\times g(y)\text{d}y\\
  & = \frac{1}{c}\int_{-\infty}^{\infty}f(y)\text{d}y\\
  & = \frac{1}{c}    
\end{align*}    
 %]]&gt;</script>

<p>因此，算法的迭代次数的期望即为<script type="math/tex">E(N)=c</script>。从这个角度上可以看出，若要使得算法的迭代次数尽可能少，等价于最小化上确界常数<script type="math/tex">c</script>。    </p>

<blockquote>
  <p>算法成功采样一个随机变量<script type="math/tex">X</script>所需的迭代次数的期望即为上确界常数<script type="math/tex">c=\text{sup}_x\{f(x)/g(x)\}</script>。    </p>
</blockquote>

<h3 id="font-colorff5544rejection-samplingfont-1"><font color="#FF5544">Rejection sampling算法证明</font></h3>
<p>由上述说明可知，要证明Rejection sampling算法可行，只需要证明<script type="math/tex">\color{khaki}{\text{在给定条件}U\leqslant \frac{f(Y)}{cg(Y)}\text{下}，\text{随机变量}Y\text{的概率分布即为}F，\text{即}，P(Y\leqslant y|U\leqslant \frac{f(Y)}{cg(Y)})=F(y)}</script>。  <br />
令<script type="math/tex">B=\{U\leqslant \frac{f(Y)}{cg(Y)}\}</script>，<script type="math/tex">A=\{Y\leqslant y\}</script>，又因为<script type="math/tex">P(B)=p=\frac{1}{c}</script>，根据贝叶斯公式：    </p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
\frac{P(B|A)P(A)}{P(B)} &= P(U\leqslant \frac{f(Y)}{cg(Y)}|Y=y)\times \frac{G(y)}{1/c}\\
                        &= \frac{P(U\leqslant \frac{f(Y)}{cg(Y)}, Y=y)}{G(y)}\times \frac{G(y)}{1/c}\\
                        &= c\int_{-\infty}^yP(U\leqslant \frac{f(Y)}{cg(Y)}|Y=w\leqslant y)g(w)\text{d}w\\
                        &= c\int_{-\infty}^y\frac{f(w)}{cg(w)}g(w)\text{d}w\\
                        &= \int_{-\infty}^yf(w)\text{d}w\\
                        &= F(y)=P(A|B)=P(Y\leqslant y|U\leqslant \frac{f(Y)}{cg(Y)})~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\blacksquare
\end{align*}
 %]]&gt;</script>

<h3 id="font-colorff5544rejection-samplingfont-2"><font color="#FF5544">用Rejection sampling算法产生离散随机变量</font></h3>
<p>产生离散随机变量的方法和产生连续随机变量的方法基本一致，只是这时候目标的概率分布函数<script type="math/tex">F</script>变成了概率质量函数<script type="math/tex">p(k)=P(X=k)</script>，辅助的概率分布<script type="math/tex">G</script>变成了概率质量函数<script type="math/tex">q(k)=P(Y=k)</script>，并满足条件<script type="math/tex">% &lt;![CDATA[
\text{sup}_x\{p(k)/q(k)\}\leqslant c < \infty %]]&gt;</script>。</p>

<h3 id="font-colorff5544betafont"><font color="#FF5544">示例：产生服从简单Beta分布的随机变量</font></h3>
<p>Beta分布的概率密度函数为<script type="math/tex">f(x)=bx^n(1-x)^m，x\in (0,1)</script>，其中<script type="math/tex">b=[\int_0^1x^n(1-x)^m\text{d}x]^{-1}</script>为归一化常数。这里我们只研究<script type="math/tex">n=m>1</script>的情况，此时Beta分布的概率密度函数关于<script type="math/tex">x=\frac{1}{2}</script>对称。这里我们选择<script type="math/tex">g(y)=1</script>这一均匀分布作为辅助的概率密度函数。因此，<script type="math/tex">c=\text{sup}_x\frac{f(x)}{g(x)}=\text{sup}_xf(x)</script>当<script type="math/tex">x=\frac{1}{2}</script>时取到最大，即<script type="math/tex">c=b4^{-n}</script>。  <br />
这样，若要产生服从<script type="math/tex">f(x)=b(x(1-x))^n</script>这一简单Beta分布的随机变量，只需要：    </p>

<table border="2" cellpadding="15px" bordercolor="#F0E68C">
<td>
<ol>
<li>产生两个0，1之间的均匀分布随机变量$U_1，U_2$。</li> <p />
<li>If $U_2\leqslant 4^n(U_1(1-U_1))^n$，then $X=U_1$;<br />
    Otherwise goto step 1。</li> 
</ol>
</td>
</table>

]]></content>
  </entry>
  
</feed>
